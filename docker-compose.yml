services:
  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - APP_DOMAIN=${APP_DOMAIN}
      - BOT_DOMAIN=${BOT_DOMAIN}
      - N8N_DOMAIN=${N8N_DOMAIN}
      - PANEL_DOMAIN=${PANEL_DOMAIN}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - /srv/stack/gestionale:/var/www/gestionale:ro
    depends_on:
      - php
      - panel
      - n8n
    networks:
      - stack

  php:
    image: php:8.2-fpm
    container_name: php
    restart: unless-stopped
    working_dir: /var/www/gestionale
    expose:
      - "9000"
    env_file:
      - ../.env
    volumes:
      - /srv/stack/gestionale:/var/www/gestionale
    networks:
      - stack

  db:
    image: mariadb:10.11
    container_name: db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - stack

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - stack

  bot:
    image: node:20
    container_name: bot
    restart: unless-stopped
    working_dir: /opt/bot
    command: ["node", "index.js"]
    volumes:
      - /srv/stack/bot:/opt/bot
    expose:
      - "3000"
    # Il bot Ã¨ predisposto ma disabilitato di default.
    # Per abilitarlo in futuro:
    # 1) impostare WA_BOT_ENABLED=true in .env
    # 2) rimuovere la sezione deploy -> replicas o impostarla a 1
    # 3) avviare: docker compose up -d bot
    deploy:
      replicas: 0
    environment:
      - WA_BOT_ENABLED=${WA_BOT_ENABLED}
      - WA_BOT_API_KEY=${WA_BOT_API_KEY}
      - WA_BOT_HMAC_KEY=${WA_BOT_HMAC_KEY}
    networks:
      - stack

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - WEBHOOK_URL=https://${N8N_DOMAIN}/
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - stack

  panel:
    image: node:20
    container_name: panel
    restart: unless-stopped
    working_dir: /opt/panel
    command: ["sh", "-c", "which unzip || (apt-get update && apt-get install -y unzip) && npm install && node index.js"]
    environment:
      - PANEL_USER=${PANEL_USER}
      - PANEL_PASS=${PANEL_PASS}
      - WA_BOT_ENABLED=${WA_BOT_ENABLED}
      - APP_DOMAIN=${APP_DOMAIN}
      - BOT_DOMAIN=${BOT_DOMAIN}
      - N8N_DOMAIN=${N8N_DOMAIN}
    volumes:
      - ./panel:/opt/panel
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # Pubblica solo su loopback dell'host per accesso via SSH tunnel
    ports:
      - "127.0.0.1:4000:4000"
    networks:
      - stack

volumes:
  db_data:
  redis_data:
  caddy_data:
  caddy_config:
  n8n_data:

networks:
  stack:
    driver: bridge


